// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using EnvDTE;

using Microsoft.VisualStudio.TemplateWizard;

using System;
using System.Collections.Generic;
using System.IO;

public partial class AssemblyInfoTemplateWizard : IWizard
{
    private static readonly string CSharp_Minimal_AssemblyInfoTemplate = $@"using System.Runtime.InteropServices;

// In SDK-style projects the assembly information is automatically
// generated on build.

// The information generated comes from the Package page on the Project Properties.

// Other attributes can be specified here as necessary

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid(""$guid1$"")]
";

    private static readonly string VB_Minimal_AssemblyInfoTemplate = @"Import System.Runtime.InteropServices

' In SDK-style projects the assembly information is automatically
' generated on build.

' The information generated comes from the Package page on the Project Properties.

' Other attributes can be specified here as necessary

' Setting ComVisible to false makes the types in this assembly not visible 
' to COM components.  If you need to access a type in this assembly from 
' COM, set the ComVisible attribute to true on that type.
<Assembly: ComVisible(False)> 

' The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid(""$guid1$"")> 
";

    public void BeforeOpeningFile(ProjectItem projectItem)
    {
    }

    public void ProjectFinishedGenerating(Project project)
    {
    }

    public void RunFinished()
    {
    }

    public void ProjectItemFinishedGenerating(ProjectItem projectItem)
    {
        try
        {
            var prop = projectItem.ContainingProject.Properties.Item("GenerateAssemblyInfo")?.Value;
            if (prop == null) return;

            if (bool.TryParse(prop.ToString(), out bool autoGenerated) && autoGenerated)
            {
                string filePath = projectItem.Properties.Item("FullPath").Value.ToString();

                // if SDK style project, overwrite file with other contents
                if (filePath.EndsWith(".cs", StringComparison.OrdinalIgnoreCase))
                {
                    File.WriteAllText(filePath, CSharp_Minimal_AssemblyInfoTemplate);
                }
                else // we only get called for C# and VB, so no need to check this
                {
                    File.WriteAllText(filePath, VB_Minimal_AssemblyInfoTemplate);
                }
            }
        }
        catch
        {
        }
    }

    public bool ShouldAddProjectItem(string filePath) => true;

    public void RunStarted(object automationObject, Dictionary<string, string> replacementsDictionary, WizardRunKind runKind, object[] customParams)
    {
    }
}
